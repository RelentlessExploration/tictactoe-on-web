{"version":3,"sources":["components/ttt/logic.js","components/control.js","components/board.js","components/head.js","components/floatingBox.js","App.js","index.js"],"names":["X","O","EMPTY","MinimaxObj","value","move","this","initial_state","player","board","xCounter","oCounter","i","length","j","actions","possibleActions","push","result","action","winner","h","check_horizontally","v","k","check_vertically","d","check_diagonally","a","b","c","args","not_null","terminal","full","utility","minimax","curr_player","empty","console","log","Math","floor","random","max_value","getMove","min_value","curr_best","Number","NEGATIVE_INFINITY","optimal_move","getValue","POSITIVE_INFINITY","PA","Control","props","updateMode","mode","setState","handleClick","hidden","includes","handler","state","id","className","onClick","Component","GridItem","parseInt","charAt","updateInnerHTML","window","localStorage","getItem","content","disabled","node","myRef","current","innerHTML","setAttribute","disable","createRef","ref","name","Board","setUser","user","setItem","JSON","stringify","updateBoardAI","getBoard","parse","updateBoard","current_board","resulting_board","current_winner","controlRef","updateMessage","child","getOrCreateRef","message","renderGrids","references","enable","setTimeout","disableBoard","aiFirstMove","steps","clear","hasOwnProperty","empty_ids","gridItems","getter","Head","FloatingBox","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7f3fa00.chunk.js","sourcesContent":["export const X = \"X\"\nexport const O = \"O\"\nexport const EMPTY = null;\n\nclass MinimaxObj {\n    /**\n     * \n     * @param {Number} value \n     * @param {Array} move structured as `[i, j]`\n     */\n    constructor(value, move) {\n        this.value = value;\n        this.move = move;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    getMove() {\n        return this.move;\n    }\n}\n\n/**\n * Accepts no argument and returns starting state of the board.\n */\nexport function initial_state() {\n    return [\n        [EMPTY, EMPTY, EMPTY],\n        [EMPTY, EMPTY, EMPTY],\n        [EMPTY, EMPTY, EMPTY],\n    ]\n}\n\n/**\n * Returns the player who has the next turn on a board.\n * @param {Array} board \n */\nexport function player(board) {\n    let xCounter = 0;\n    let oCounter = 0;\n\n    for (var i = 0; i < board.length; i++) {\n        for (var j = 0; j < board.length; j++) {\n            if (board[i][j] === X) {\n                xCounter++;\n            } else if (board[i][j] === O) {\n                oCounter++;\n            }\n        }\n    }\n\n    if (xCounter > oCounter) {\n        return O;\n    } else {\n        return X;\n    }\n\n}\n\n/**\n * Returns set of all possible actions [i, j] available on the board.\n * @param {Array} board \n */\nexport function actions(board) {\n    let possibleActions = [];\n\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board.length; j++) {\n            if (board[i][j] === EMPTY) {\n                possibleActions.push([i, j]);\n            }\n        }\n    }\n    return possibleActions;\n}\n\n/**\n * \n * @param {Array} board \n * @param {Array} action structured as `[i, j]`\n * @returns \n */\nexport function result(board, action) {\n    let result = [[], [], []];\n    // deepcopying the board\n    for (var i = 0; i < board.length; i++) {\n        for (var j = 0; j < board.length; j++) {\n            result[i][j] = board[i][j]\n        }\n    }\n    result[action[0]][action[1]] = player(board);\n    return result;\n}\n\n/**\n * Returns the winner of the game, if there is one, and null otherwise.\n * @param {Array} board \n */\nexport function winner(board) {\n    const h = check_horizontally(board);\n    const v = check_vertically(board);\n    const d = check_diagonally(board);\n    if (not_null(h, v, d)) {\n        if (h === X || v === X || d === X) {\n            return X;\n        } else {\n            return O;\n        }\n    } else {\n        return null;\n    }\n}\n\n/**\n * Returns `true` if the game is over, `false` otherwise.\n * @param {Array} board \n */\nexport function terminal(board) {\n    return (winner(board) !== null || full(board));\n}\n\n/**\n * Returns 1 if X has won the game, -1 if O has won, 0 otherwise.\n * @param {Array} board \n * @returns `1 || 0 || -1`\n */\nexport function utility(board) {\n    if (winner(board) === X) {\n        return 1;\n    } else if (winner(board) === O) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * Returns the optimal action for the current player on the board.\n * @param {Array} board \n */\nexport function minimax(board) {\n    const curr_player = player(board);\n    if (terminal(board)) {\n        return null;\n    } \n    let empty = true;\n    for (var i = 0; i < board.length; i++) {\n        for (var j = 0; j < board.length; j++) {\n            if (board[i][j] === X || board[i][j] === O) {\n                empty = false;\n            }\n        }\n    }\n    if (empty) {\n        console.log('empty')\n        return actions(board)[Math.floor(Math.random() * 10)];\n    }\n    if (curr_player === X) {\n        const optimal = max_value(board);\n        return optimal.getMove();\n    } else {\n        const optimal = min_value(board);\n        return optimal.getMove();\n    }\n    \n}\n\n/**\n * Gets the move with highest value for the given board\n * @param {Array} board \n */\nexport function max_value(board) {\n    if (terminal(board)) {\n        return new MinimaxObj(utility(board), null);\n    } \n    let curr_best = Number.NEGATIVE_INFINITY;\n    let optimal_move = null;\n\n    const possibleActions = actions(board);\n    for (let i = 0; i < possibleActions.length; i++) {\n        let action = possibleActions[i];\n        let buffer = min_value(result(board, action));\n        let v = buffer.getValue();\n        if (v > curr_best) {\n            curr_best = v;\n            optimal_move = action;\n            if (curr_best === 1) {\n                return new MinimaxObj(curr_best, optimal_move);\n            }\n        }\n    }\n    return new MinimaxObj(curr_best, optimal_move);\n}\n\n/**\n * Gets the move with lowest value for the given board\n * @param {Array} board \n */\n export function min_value(board) {\n    if (terminal(board)) {\n        return new MinimaxObj(utility(board), null);\n    } \n    let curr_best = Number.POSITIVE_INFINITY;\n    let optimal_move = null;\n\n    const possibleActions = actions(board);\n    for (let i = 0; i < possibleActions.length; i++) {\n        let action = possibleActions[i];\n        let buffer = max_value(result(board, action));\n        let v = buffer.getValue();\n        if (v < curr_best) {\n            curr_best = v;\n            optimal_move = action;\n            if (curr_best === -1) {\n                return new MinimaxObj(curr_best, optimal_move);\n            }\n        }\n    }\n    return new MinimaxObj(curr_best, optimal_move);\n}\n\n/**\n * Returns `true` if the board is full, and `false` otherwise\n * @param {Array} board \n */\nexport function full(board) {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board.length; j++) {\n            if (board[i][j] === EMPTY) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n/* ====================================================================== */\n                    /* Below are some helper export functions */\n\n/**\n * Checks for any three-in-a-row horizontally, return the winner if there is one, null otherwise\n * @param {Array} board \n */\nexport function check_horizontally(board) {\n    for (let i = 0; i < board.length; i++) {\n        if (board[i][0] === board[i][1] && board[i][1] === board[i][2] && board[i][0] !== EMPTY) {\n            if (board[i][0] === X) {\n                return X;\n            } else {\n                return O;\n            }\n        }\n    }\n    return null;\n}\n\n/**\n * Checks for any three-in-a-row vertically, return the winner if there is one, null otherwise\n * @param {Array} board \n */\nexport function check_vertically(board) {\n    for (var k = 0; k < board.length; k++) {\n        if (board[0][k] === board[1][k] && board[1][k] === board[2][k] && board[0][k] !== EMPTY) {\n            if (board[0][k] === X) {\n                return X;\n            } else {\n                return O;\n            }\n        }\n    }\n    return null;\n}\n\n/**\n * Checks for any three-in-a-row diagonally, return the winner if there is one, null otherwise\n * @param {Array} board \n */\n export function check_diagonally(board) {\n    if (board[0][0] === board[1][1] && board[1][1] === board[2][2] && board[0][0] !== EMPTY) {\n        return board[0][0];\n    }\n    if (board[0][2] === board[1][1] && board[2][0] === board[0][2] && board[0][2] !== EMPTY) {\n        return board[0][2];\n    }\n    return null;\n}\n\n\nfunction not_null(a, b, c) {\n    const args = [a, b, c];\n    for (var i = 0; i < args.length; i++) {\n        if (args[i] !== null) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { Component } from 'react';\nimport { O, X } from './ttt/logic';\n\nexport const PA = 'playAgain';\n\nexport class Control extends Component {\n    /**\n     * Available modes are `choose` and `gameEnds`\n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: props.mode,\n            hidden: false\n        }\n    }\n\n    updateMode = (mode) => {\n        this.setState({\n            mode: mode\n        })\n    }\n\n\n    render() {\n        if (this.state.mode === 'choose') {\n            if (this.state.hidden) {\n                return (\n                    <div id=\"hidden-chooseContainer\">\n                        <div id=\"buttonWrapper\">\n                            <button className=\"choose-btn btn btn-info\" onClick={() => this.handleClick(X)}>Play as X</button>\n                            <button className=\"choose-btn btn btn-success\" onClick={() => this.handleClick(O)}>Play as O</button>\n                        </div>\n                    </div>\n                )\n            }\n            return (\n                <div id=\"chooseContainer\">\n                    <h1 id=\"chooseSubHeading\">Choose Player:</h1>\n                    <div id=\"buttonWrapper\">\n                        <button className=\"choose-btn btn btn-dark\" onClick={() => this.handleClick(X)}>Play as X</button>\n                        <button className=\"choose-btn btn btn-success\" onClick={() => this.handleClick(O)}>Play as O</button>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div id=\"chooseContainer\">\n                    <h1 id=\"chooseSubHeading\">Next:</h1>\n                    <div id=\"buttonWrapper\">\n                        <button className=\"choose-btn btn btn-success\" onClick={() => this.handleClick()}>Play again</button>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n    handleClick = (c = null) => {\n        // hide the panel\n        this.setState({\n            hidden: true\n        })\n        if ([X, O].includes(c)) {\n            this.props.handler(c);\n        } else {\n            console.log('replay')\n            this.setState({\n                mode: 'choose',\n                hidden: false\n            })\n        }\n    }\n}\n\nexport default Control;","import { Component, createRef } from \"react\";\nimport { Control, PA } from \"./control.js\";\nimport {\n  initial_state,\n  player,\n  result,\n  terminal,\n  winner,\n  X,\n  O,\n  minimax,\n  EMPTY,\n} from \"./ttt/logic.js\";\n\nclass GridItem extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = createRef();\n  }\n\n  render() {\n    if (window.localStorage.getItem(\"user\") === null) {\n      return (\n        <div className=\"tttButtonsContainer\">\n          <button\n            ref={this.myRef}\n            disabled\n            className=\"tttButtons btn btn-secondary\"\n            id={this.props.id}\n            onClick={() => this.handleClick(this.props.id)}\n          >\n            {/* this is used plugging variables into the component.\n                        For example:\n                        if you render the component with:\n                        <Grid name=\"foo\" />\n                        then the variable below in the curly braces is going to be `foo`\n    \n                        but if there is not value provided for \n                        this property then we are going to accept some \n                        default value after `||`\n                        */}\n            {this.props.name || \"\"}\n          </button>\n        </div>\n      );\n    }\n    return (\n      <div className=\"tttButtonsContainer\">\n        <button\n          ref={this.myRef}\n          className=\"tttButtons btn btn-warning\"\n          id={this.props.id}\n          onClick={() => this.handleClick(this.props.id)}\n        >\n          {this.props.name || \"\"}\n        </button>\n      </div>\n    );\n  }\n\n  /* here we define handle click and set it to be\n    a function that handles the event when element inside of \n    this component gets clicked */\n  handleClick = (id) => {\n    // construct an array representing the action taken by the user\n    let action = [parseInt(id.charAt(0)), parseInt(id.charAt(1))];\n    this.props.handler(action);\n    this.updateInnerHTML(window.localStorage.getItem(\"player\"), true);\n  };\n\n  updateInnerHTML = async (content, disabled) => {\n    let node = this.myRef.current;\n    node.innerHTML = content;\n    node.setAttribute(\"disabled\", \"true\");\n  };\n\n  disable = () => {\n    let node = this.myRef.current;\n    if (node.innerHTML !== X && node.innerHTML !== O) {\n      this.myRef.current.className = \"tttButtons btn btn-secondary\";\n      this.myRef.current.innerHTML = \"\";\n      this.myRef.current.disabled = true;\n    }\n  };\n\n  /**\n   * Sets disabled to false and innerhtml to empty string\n   */\n  enable() {\n    let node = this.myRef.current;\n    node.innerHTML = \"\";\n    node.disabled = false;\n    node.className = \"tttButtons btn btn-warning\";\n  }\n}\n\nclass Board extends Component {\n  /**\n   * Initializing a complete implementation of a tic tac toe board\n   * @param {*} props\n   */\n  constructor(props) {\n    // inheriting from the original React's constructor\n    super(props);\n\n    // some variables we are going to keep track of\n    this.state = {\n      winner: null,\n    };\n    this.references = {};\n    this.controlRef = createRef();\n\n    window.localStorage.clear();\n\n    // store the variables in the local storage\n    window.localStorage.setItem(\"board\", JSON.stringify(initial_state()));\n    window.localStorage.setItem(\"terminal\", \"false\");\n    window.localStorage.setItem(\"player\", player(initial_state()));\n    window.localStorage.setItem(\"steps\", \"0\");\n    window.localStorage.setItem(\"message\", \"\");\n  }\n\n  setUser = (user) => {\n    window.localStorage.setItem(\"board\", JSON.stringify(initial_state()));\n    window.localStorage.setItem(\"user\", user);\n    window.localStorage.setItem(\"terminal\", \"false\");\n    window.localStorage.setItem(\"message\", \"\");\n    this.setState(this.state);\n    if (user === O) {\n      this.updateBoardAI();\n    }\n  };\n\n  getOrCreateRef(id) {\n    if (!this.references.hasOwnProperty(id)) {\n      this.references[id] = createRef();\n    }\n    return this.references[id];\n  }\n\n  getBoard = () => {\n    return JSON.parse(window.localStorage.getItem(\"board\"));\n  };\n\n  /**\n   * Updates the existing board with the given action\n   * returns the current player\n   * @param {*} action\n   */\n  updateBoard = (action) => {\n    // retrieve current board from local storage\n    let current_board = this.getBoard();\n\n    // get resulting board based user move\n    let resulting_board = result(current_board, action);\n\n    // get current player\n    let curr_player = player(current_board);\n    window.localStorage.setItem(\"prevPlayer\", curr_player);\n\n    // update\n    window.localStorage.setItem(\"player\", player(resulting_board));\n    window.localStorage.setItem(\"board\", JSON.stringify(resulting_board));\n\n    // increment steps\n    window.localStorage.setItem(\n      \"steps\",\n      `${parseInt(window.localStorage.getItem(\"steps\")) + 1}`\n    );\n\n    if (terminal(resulting_board)) {\n      let current_winner = winner(resulting_board);\n      this.controlRef.current.updateMode(PA);\n      window.localStorage.setItem(\"terminal\", \"true\");\n      if (current_winner !== null) {\n        this.updateMessage(`Game over, ${current_winner} wins`);\n      } else {\n        this.updateMessage(`Game over, tie`);\n      }\n    } else {\n      this.updateBoardAI();\n      this.setState(this.state);\n    }\n  };\n\n  /**\n   * Updates the existing board with the given action\n   * returns the current player\n   *\n   */\n  updateBoardAI = async () => {\n    // retrieve current board from local storage\n    let current_board = this.getBoard();\n\n    let action = minimax(current_board);\n\n    // get resulting board\n    let resulting_board = result(current_board, action);\n\n    // get current player\n    let curr_player = player(current_board);\n    window.localStorage.setItem(\"prevPlayer\", curr_player);\n\n    // update\n    window.localStorage.setItem(\"player\", player(resulting_board));\n    window.localStorage.setItem(\"board\", JSON.stringify(resulting_board));\n\n    // increment steps\n    window.localStorage.setItem(\n      \"steps\",\n      `${parseInt(window.localStorage.getItem(\"steps\")) + 1}`\n    );\n\n    // show new message\n    this.updateMessage(`Play as ${window.localStorage.getItem(\"user\")}`);\n\n    // disable the button\n    let child = this.getOrCreateRef(`${action[0]}${action[1]}`);\n    console.log(`processing action ${action[0]}${action[1]}`);\n    console.log(\"processing grid:\");\n    console.log(child.current);\n    child.current.updateInnerHTML(curr_player, true);\n    this.setState(this.state);\n    console.log(this.getBoard());\n\n    if (terminal(resulting_board)) {\n      let current_winner = winner(resulting_board);\n      window.localStorage.setItem(\"terminal\", \"true\");\n      this.controlRef.current.updateMode(PA);\n      if (current_winner !== null) {\n        this.updateMessage(`Game over, ${current_winner} wins`);\n      } else {\n        this.updateMessage(`Game over, tie`);\n      }\n    }\n  };\n\n  disableBoard(board) {\n    // get empty grids\n    let empty_ids = [];\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board.length; j++) {\n        if (board[i][j] === EMPTY) {\n          empty_ids.push(`${i}${j}`);\n        }\n      }\n    }\n    for (var i = 0; i < empty_ids.length; i++) {\n      let child = this.getOrCreateRef(empty_ids[i]);\n      child.current.disable();\n    }\n  }\n\n  enableBoard(board) {\n    // get empty grids\n    let empty_ids = [];\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board.length; j++) {\n        if (board[i][j] === EMPTY) {\n          empty_ids.push(`${i}${j}`);\n        }\n      }\n    }\n    for (var i = 0; i < empty_ids.length; i++) {\n      let child = this.getOrCreateRef(empty_ids[i]);\n      child.current.enable();\n    }\n  }\n\n  /**\n   * Updates the message displayed on top of the board\n   * @param {String} message\n   */\n  updateMessage = (message) => {\n    window.localStorage.setItem(\"message\", message);\n    this.setState(this.state);\n  };\n\n  renderGrids = (board) => {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board.length; j++) {\n        let child = this.references[`${i}${j}`];\n        if (board[i][j] === EMPTY) {\n          child.current.enable();\n        } else {\n          child.current.updateInnerHTML(board[i][j], true);\n          setTimeout(() => {}, 3000);\n        }\n      }\n    }\n    if (window.localStorage.getItem(\"terminal\") === \"true\") {\n      this.disableBoard(board);\n    }\n  };\n\n  aiFirstMove = () => {\n    let steps = parseInt(window.localStorage.getItem(\"steps\"));\n    let user = window.localStorage.getItem(\"user\");\n    if (steps === 0 && user === O) {\n      let action = minimax(initial_state());\n      let resulting_board = result(initial_state(), action);\n      this.renderGrids(resulting_board);\n    }\n  };\n\n  render() {\n    if (parseInt(window.localStorage.getItem(\"steps\")) > 0) {\n      this.renderGrids(this.getBoard());\n    }\n\n    const gridItems = [];\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        gridItems.push(\n          <GridItem\n            ref={this.getOrCreateRef(`${i}${j}`)}\n            id={`${i}${j}`}\n            handler={this.updateBoard}\n            getter={this.getBoard}\n          />\n        );\n      }\n    }\n\n    return (\n      <div id=\"tictactoe\">\n        <div id=\"tttmessage-wrapper\">\n          <h3 id=\"tttmessage\">\n            {window.localStorage.getItem(\"message\") || \"\"}\n          </h3>\n        </div>\n        <div id=\"panel-wrapper\">\n          <div id=\"choose-container\">\n            <Control\n              ref={this.controlRef}\n              handler={this.setUser}\n              mode=\"choose\"\n            />\n          </div>\n          <div id=\"board\" key=\"unique\">\n            {gridItems}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import {Component} from 'react';\nclass Head extends Component {\n\n    // every component must have a render method that decides\n    // how the component should be displayed\n    render() {\n        // surrounding the html elements in parentheses \n        // to let the html elements span multiple lines\n        return (\n            <h1 id=\"heading\">Tic Tac Toe</h1>\n        )\n    } \n}\nexport default Head;","import {Component} from 'react';\n\nclass FloatingBox extends Component {\n    render() {\n        return (\n            <div id=\"box-animations\">\n                <ul id=\"box-area\">\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default FloatingBox;","import \"./css/master.css\";\nimport Board from \"./components/board.js\";\nimport Head from \"./components/head.js\";\nimport FloatingBox from \"./components/floatingBox.js\";\nimport { Component } from \"react\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Head />\n        <Board user={this.user} />\n        <FloatingBox />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}